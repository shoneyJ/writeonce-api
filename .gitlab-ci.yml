stages:
  - build
  - push
  - deploy
variables: 
  IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  CONTAINER_NAME: $CI_PROJECT_NAME-container

build:
  stage: build
  image: docker:20.10.7
  services:
    - docker:20.10.7-dind
  before_script:
    - echo "Setting up Docker environment"  
  script:
    - docker info  # Verify Docker is running
    - docker build -t ${IMAGE_NAME} .

push:
  stage: push
  image: docker:20.10.7
  services:
    - docker:20.10.7-dind
  before_script:
    - echo "Logging into Docker registry"  
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push ${IMAGE_NAME}
  only:
    - main

deploy:
  stage: deploy
  image: docker:20.10.7
  services:
    - docker:20.10.7-dind
  before_script:
    - echo "Docker set docker auth config"
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - ssh -T -o StrictHostKeyChecking=no deployer@writeonce.de \
        'mkdir -p ~/.docker && echo "$DOCKER_AUTH_CONFIG" > ~/.docker/config.json'

  script:
    - ssh -T -o StrictHostKeyChecking=no deployer@writeonce.de "docker pull \"$IMAGE_NAME\""
    - ssh -T -o StrictHostKeyChecking=no deployer@writeonce.de "docker ps -q -f name=\"$CONTAINER_NAME\" | grep -q . && docker stop \$CONTAINER_NAME"
    - ssh -T -o StrictHostKeyChecking=no deployer@writeonce.de "docker ps -a -q -f name=\"$CONTAINER_NAME\" | grep -q .&& docker rm \$CONTAINER_NAME"    
    - ssh -T -o StrictHostKeyChecking=no deployer@writeonce.de "docker run -d -p $API_PORT:$API_PORT -e AWS_INFRA_BASE_URL=\"$AWS_INFRA_BASE_URL\" -e PORT=$API_PORT  -e API_ACCESS_TOKEN=\"$API_ACCESS_TOKEN\" -e DATABASE_URL=\"$DATABASE_URL\" --name \"$CONTAINER_NAME\" --restart always --network writeonce-network $IMAGE_NAME"
    - ssh-agent -k
  only:
    - main